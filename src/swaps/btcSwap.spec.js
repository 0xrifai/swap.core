import test from 'ava'
import { Bitcoin } from '../../app/src/instances/bitcoin'
import BtcSwap from './BtcSwap'


const secret      = 'c0809ce9f484fdcdfb2d5aabd609768ce0374ee97a1a5618ce4cd3f16c00a078'
const secretHash  = 'c0933f9be51a284acb6b1a6617a48d795bdeaa80'
const lockTime    = 1521171580

const bitcoin = new Bitcoin()

const btcOwnerAccount = bitcoin.login('cPEbuS2XrE1nb65XBk4me2wd5jtyQijDaKTBaBfLF74W5QrXKePs')
const ethOwnerAccount = bitcoin.login('cN2N9ZMWxHAsrRmerTxZfLNzXPGyJsTUDQH9dCCVCqiE9uTnAEaB')

const btcSwap = new BtcSwap({
  lib: bitcoin.core,
  account: btcOwnerAccount,
  fetchUnspents: () => bitcoin.fetchUnspents(btcOwnerAccount.getAddress()),
  broadcastTx: (txRaw) => bitcoin.broadcastTx(txRaw),
})


// test('check secretHash generated by ripemd160', (t) => {
//   const result = crypto.ripemd160(Buffer.from(secret, 'hex')).toString('hex')
//   const expected = secretHash
//
//   t.is(result, expected)
// })
//
// test('create script', (t) => {
//   const result = btcSwap.createScript({
//     secretHash,
//     btcOwnerPublicKey: btcOwnerAccount.getPublicKeyBuffer().toString('hex'),
//     ethOwnerPublicKey: ethOwnerAccount.getPublicKeyBuffer().toString('hex'),
//     lockTime,
//   })
//
//   const expected = {
//     address: '2N1gPhUP9fcjUzp38X1YBXsYaijersDrxTN',
//     lockTime: 1521171580,
//   }
//
//   t.is(result.address, expected.address)
//   t.is(result.lockTime, expected.lockTime)
// })

test('create + fund + withdraw', async (t) => {
  const { script, lockTime } = btcSwap.createScript({
    secretHash,
    btcOwnerPublicKey: btcOwnerAccount.getPublicKeyBuffer().toString('hex'),
    ethOwnerPublicKey: ethOwnerAccount.getPublicKeyBuffer().toString('hex'),
  })

  log('\nCreate complete')
  log({ script, lockTime })

  const fundResult = await btcSwap.fundScript({ script, amount: 0.0001 })

  log('\nFund complete')
  log(fundResult)

  const withdrawResult = await btcSwap.withdraw({ script, secret })

  log('\nWithdraw complete')
  log(withdrawResult)
})
